// Code generated by protoc-services-go-grpc. DO NOT EDIT.
// versions:
// - protoc-services-go-grpc v1.2.0
// - protoc             v3.21.4
// source: LikeService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	IsLike(ctx context.Context, in *IsLikeRequest, opts ...grpc.CallOption) (*IsLikeResponse, error)
	LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error)
	GetLikeList(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*LikeListResponse, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) IsLike(ctx context.Context, in *IsLikeRequest, opts ...grpc.CallOption) (*IsLikeResponse, error) {
	out := new(IsLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.LikeService/IsLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error) {
	out := new(LikeActionResponse)
	err := c.cc.Invoke(ctx, "/pb.LikeService/LikeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikeList(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*LikeListResponse, error) {
	out := new(LikeListResponse)
	err := c.cc.Invoke(ctx, "/pb.LikeService/GetLikeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations should embed UnimplementedLikeServiceServer
// for forward compatibility
type LikeServiceServer interface {
	IsLike(context.Context, *IsLikeRequest) (*IsLikeResponse, error)
	LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error)
	GetLikeList(context.Context, *LikeListRequest) (*LikeListResponse, error)
}

// UnimplementedLikeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLikeServiceServer struct {
}

func (UnimplementedLikeServiceServer) IsLike(context.Context, *IsLikeRequest) (*IsLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLike not implemented")
}
func (UnimplementedLikeServiceServer) LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAction not implemented")
}
func (UnimplementedLikeServiceServer) GetLikeList(context.Context, *LikeListRequest) (*LikeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeList not implemented")
}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LikeService/IsLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).IsLike(ctx, req.(*IsLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_LikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).LikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LikeService/LikeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).LikeAction(ctx, req.(*LikeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LikeService/GetLikeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikeList(ctx, req.(*LikeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLike",
			Handler:    _LikeService_IsLike_Handler,
		},
		{
			MethodName: "LikeAction",
			Handler:    _LikeService_LikeAction_Handler,
		},
		{
			MethodName: "GetLikeList",
			Handler:    _LikeService_GetLikeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LikeService.proto",
}
