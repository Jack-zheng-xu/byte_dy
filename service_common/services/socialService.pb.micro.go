// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: socialService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SocialService service

func NewSocialServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SocialService service

type SocialService interface {
	RelationService(ctx context.Context, in *DouyinRelationActionRequest, opts ...client.CallOption) (*DouyinRelationActionResponse, error)
	RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...client.CallOption) (*DouyinRelationFollowListResponse, error)
	RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...client.CallOption) (*DouyinRelationFollowerListResponse, error)
	RelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...client.CallOption) (*DouyinRelationFriendListResponse, error)
	MessageAction(ctx context.Context, in *DouyinRelationActionRequestContent, opts ...client.CallOption) (*DouyinRelationActionResponse, error)
	MessageChat(ctx context.Context, in *DouyinMessageChatRequest, opts ...client.CallOption) (*DouyinMessageChatResponse, error)
}

type socialService struct {
	c    client.Client
	name string
}

func NewSocialService(name string, c client.Client) SocialService {
	return &socialService{
		c:    c,
		name: name,
	}
}

func (c *socialService) RelationService(ctx context.Context, in *DouyinRelationActionRequest, opts ...client.CallOption) (*DouyinRelationActionResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.RelationService", in)
	out := new(DouyinRelationActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialService) RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...client.CallOption) (*DouyinRelationFollowListResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.RelationFollowList", in)
	out := new(DouyinRelationFollowListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialService) RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...client.CallOption) (*DouyinRelationFollowerListResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.RelationFollowerList", in)
	out := new(DouyinRelationFollowerListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialService) RelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...client.CallOption) (*DouyinRelationFriendListResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.RelationFriendList", in)
	out := new(DouyinRelationFriendListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialService) MessageAction(ctx context.Context, in *DouyinRelationActionRequestContent, opts ...client.CallOption) (*DouyinRelationActionResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.MessageAction", in)
	out := new(DouyinRelationActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialService) MessageChat(ctx context.Context, in *DouyinMessageChatRequest, opts ...client.CallOption) (*DouyinMessageChatResponse, error) {
	req := c.c.NewRequest(c.name, "SocialService.MessageChat", in)
	out := new(DouyinMessageChatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SocialService service

type SocialServiceHandler interface {
	RelationService(context.Context, *DouyinRelationActionRequest, *DouyinRelationActionResponse) error
	RelationFollowList(context.Context, *DouyinRelationFollowListRequest, *DouyinRelationFollowListResponse) error
	RelationFollowerList(context.Context, *DouyinRelationFollowerListRequest, *DouyinRelationFollowerListResponse) error
	RelationFriendList(context.Context, *DouyinRelationFriendListRequest, *DouyinRelationFriendListResponse) error
	MessageAction(context.Context, *DouyinRelationActionRequestContent, *DouyinRelationActionResponse) error
	MessageChat(context.Context, *DouyinMessageChatRequest, *DouyinMessageChatResponse) error
}

func RegisterSocialServiceHandler(s server.Server, hdlr SocialServiceHandler, opts ...server.HandlerOption) error {
	type socialService interface {
		RelationService(ctx context.Context, in *DouyinRelationActionRequest, out *DouyinRelationActionResponse) error
		RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, out *DouyinRelationFollowListResponse) error
		RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, out *DouyinRelationFollowerListResponse) error
		RelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, out *DouyinRelationFriendListResponse) error
		MessageAction(ctx context.Context, in *DouyinRelationActionRequestContent, out *DouyinRelationActionResponse) error
		MessageChat(ctx context.Context, in *DouyinMessageChatRequest, out *DouyinMessageChatResponse) error
	}
	type SocialService struct {
		socialService
	}
	h := &socialServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SocialService{h}, opts...))
}

type socialServiceHandler struct {
	SocialServiceHandler
}

func (h *socialServiceHandler) RelationService(ctx context.Context, in *DouyinRelationActionRequest, out *DouyinRelationActionResponse) error {
	return h.SocialServiceHandler.RelationService(ctx, in, out)
}

func (h *socialServiceHandler) RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, out *DouyinRelationFollowListResponse) error {
	return h.SocialServiceHandler.RelationFollowList(ctx, in, out)
}

func (h *socialServiceHandler) RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, out *DouyinRelationFollowerListResponse) error {
	return h.SocialServiceHandler.RelationFollowerList(ctx, in, out)
}

func (h *socialServiceHandler) RelationFriendList(ctx context.Context, in *DouyinRelationFriendListRequest, out *DouyinRelationFriendListResponse) error {
	return h.SocialServiceHandler.RelationFriendList(ctx, in, out)
}

func (h *socialServiceHandler) MessageAction(ctx context.Context, in *DouyinRelationActionRequestContent, out *DouyinRelationActionResponse) error {
	return h.SocialServiceHandler.MessageAction(ctx, in, out)
}

func (h *socialServiceHandler) MessageChat(ctx context.Context, in *DouyinMessageChatRequest, out *DouyinMessageChatResponse) error {
	return h.SocialServiceHandler.MessageChat(ctx, in, out)
}
