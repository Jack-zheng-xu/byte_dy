// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: LikeService.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LikeService service

func NewLikeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LikeService service

type LikeService interface {
	IsLike(ctx context.Context, in *IsLikeRequest, opts ...client.CallOption) (*IsLikeResponse, error)
	LikeAction(ctx context.Context, in *LikeActionRequest, opts ...client.CallOption) (*LikeActionResponse, error)
	GetLikeList(ctx context.Context, in *LikeListRequest, opts ...client.CallOption) (*LikeListResponse, error)
}

type likeService struct {
	c    client.Client
	name string
}

func NewLikeService(name string, c client.Client) LikeService {
	return &likeService{
		c:    c,
		name: name,
	}
}

func (c *likeService) IsLike(ctx context.Context, in *IsLikeRequest, opts ...client.CallOption) (*IsLikeResponse, error) {
	req := c.c.NewRequest(c.name, "LikeService.IsLike", in)
	out := new(IsLikeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeService) LikeAction(ctx context.Context, in *LikeActionRequest, opts ...client.CallOption) (*LikeActionResponse, error) {
	req := c.c.NewRequest(c.name, "LikeService.LikeAction", in)
	out := new(LikeActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeService) GetLikeList(ctx context.Context, in *LikeListRequest, opts ...client.CallOption) (*LikeListResponse, error) {
	req := c.c.NewRequest(c.name, "LikeService.GetLikeList", in)
	out := new(LikeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LikeService service

type LikeServiceHandler interface {
	IsLike(context.Context, *IsLikeRequest, *IsLikeResponse) error
	LikeAction(context.Context, *LikeActionRequest, *LikeActionResponse) error
	GetLikeList(context.Context, *LikeListRequest, *LikeListResponse) error
}

func RegisterLikeServiceHandler(s server.Server, hdlr LikeServiceHandler, opts ...server.HandlerOption) error {
	type likeService interface {
		IsLike(ctx context.Context, in *IsLikeRequest, out *IsLikeResponse) error
		LikeAction(ctx context.Context, in *LikeActionRequest, out *LikeActionResponse) error
		GetLikeList(ctx context.Context, in *LikeListRequest, out *LikeListResponse) error
	}
	type LikeService struct {
		likeService
	}
	h := &likeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LikeService{h}, opts...))
}

type likeServiceHandler struct {
	LikeServiceHandler
}

func (h *likeServiceHandler) IsLike(ctx context.Context, in *IsLikeRequest, out *IsLikeResponse) error {
	return h.LikeServiceHandler.IsLike(ctx, in, out)
}

func (h *likeServiceHandler) LikeAction(ctx context.Context, in *LikeActionRequest, out *LikeActionResponse) error {
	return h.LikeServiceHandler.LikeAction(ctx, in, out)
}

func (h *likeServiceHandler) GetLikeList(ctx context.Context, in *LikeListRequest, out *LikeListResponse) error {
	return h.LikeServiceHandler.GetLikeList(ctx, in, out)
}
